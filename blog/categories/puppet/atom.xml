<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Puppet | Arnoud's Blog]]></title>
  <link href="http://arnoudj.github.io/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://arnoudj.github.io/"/>
  <updated>2014-02-05T13:50:25+01:00</updated>
  <id>http://arnoudj.github.io/</id>
  <author>
    <name><![CDATA[Arnoud de Jonge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FOSDEM and cfgmgmtdays]]></title>
    <link href="http://arnoudj.github.io/blog/2014/02/05/fosdem-and-cfgmgmtdays/"/>
    <updated>2014-02-05T13:17:00+01:00</updated>
    <id>http://arnoudj.github.io/blog/2014/02/05/fosdem-and-cfgmgmtdays</id>
    <content type="html"><![CDATA[<p>I went to FOSDEM and cfgmgmnt Camp on sunday, monday and tuesday. Here is a ‘short’ summary of some things of interest I saw.</p>

<!-- more -->


<h1>FOSDEM</h1>

<p>Went to some talks about virtualisation oVirt, CloudStack and OpenStack.</p>

<p>OpenDaylight with oVirt. OpenDaylight is a software defined network layer, much like Neutron in OpenStack. (OpenDaylight can be used in OpenStack to replace Neutron, but that was not part of this talk).</p>

<h2>libCloud</h2>

<p>Python library for interacting with multiple cloud providers via a unified API.</p>

<h2>DeltaCloud</h2>

<p>Same a libCloud, but in Ruby (yay!)</p>

<h2>knife cs</h2>

<p>Knife plugin to manage your CloudStack servers with chef. Same thing also available for OpenStack as ‘knife openstack’</p>

<h1>Cfgmgmt Camp</h1>

<p>This is a new conference that started last year as Puppet Camp, but this year includes all the major Configuration Management systems. This will be a yearly event organised the days following FOSDEM. Some of the talks I went to are:</p>

<h2>Building a CI Pipeline with Chef</h2>

<p>Use Feature Toggling in stead of branches and merges. With Feature Toggling you add all your changes to the master. New (untested) features are not enabled by default but can be toggled on when needed. This enabled you to get quick feedback about your code.
Use Jenkins to automatically test your code.
Useful Jenkins plugins:
&ndash; Build Flow
&ndash; Build Graph View
Cucumber for end2end testing.
Gather info from tests in Logstash so you can see later on why a test failed.
Add monitoring in your test environment, Nagios / Sensu to catch problems early on.
Jenkins can run jobs in parallel. Use this as much as possible to shorten the test cycle.</p>

<h2>MCollective and Chef</h2>

<p>MCollective is a tool written for Puppet, but it’s very customisable and will also work with Chef. MCollective is an orchestration tool which can be a better alternative to an ssh in a for loop. MCollective can read facts from Ohai, and filter on that. For instance:</p>

<p><code>mco find --with-class role.webserver --with-class /apache/</code></p>

<p>Will give you a list of all servers which have the apache class. With added flags you can also run commands on all these servers. For instance you can stop or start apache or run Chef to update a configuration setting.</p>

<p>See: <a href="http://docs.puppetlabs.com/mcollective/reference/integration/chef.html">http://docs.puppetlabs.com/mcollective/reference/integration/chef.html</a></p>

<h2>Docker</h2>

<p>Docker is an LXC-based container service to create portable and self-sufficient containers of an application which can be used to build a PAAS. Note: Docker is also available now as a hypervisor in OpenStack.</p>

<p>Boot2docker is a Tiny Core Linux distribution to run Docker containers on your OS X or Linux workstation. Can be used to develop and test a container before pushing to production.</p>

<p>In (a/the) next version of Docker autoscaling will be added. So you can fire off more docker instances automatically when needed.</p>

<h2>Testing Configuration Management</h2>

<p>A talk about testing configuration management with Chef.</p>

<ul>
<li><p><em>Test Kitchen</em>
Tests your Chef recipes on a VM (OpenStack, Vagrant, LXC, etc.) This can run the tests for various versions of Chef and on various distributions. It supports many testing frameworks like Serverspec, Bats and Rspec.
See: <a href="http://kitchen.ci/">http://kitchen.ci/</a></p></li>
<li><p><em>Serverspec</em>
With ServerSpec you can write tests to see if a server is configured correctly. When you combine this with Test Kitchen you can add checks that run after the test servers is deployed with Chef. for instance check if all the required packages are installed, if a process is listening on port 80 or if a certain line is present in a configuration file.</p></li>
<li><p><em>Bats (Bash Automated Testing System)</em>
Testing framework in Bash.
See: <a href="https://github.com/sstephenson/bats">https://github.com/sstephenson/bats</a></p></li>
<li><p><em>RuboCop</em>
A Ruby code analyzer. Checks for coding style.</p></li>
<li><p><em>Foodcritic</em>
Checks for coding style in Chef Recipes.
See: <a href="http://acrmp.github.io/foodcritic/">http://acrmp.github.io/foodcritic/</a></p></li>
<li><p><em>chefspec</em>
ChefSpec is an Rspec unit testing framework for testing Chef cookbooks.</p></li>
</ul>


<p>See: <a href="https://github.com/sethvargo/chefspec">https://github.com/sethvargo/chefspec</a></p>

<p>An example of a Chef cookbook with most of the tests added is: <a href="https://github.com/opscode-cookbooks/yum">https://github.com/opscode-cookbooks/yum</a></p>

<p>Next event: <a href="http://loadays.org">http://loadays.org</a></p>
]]></content>
  </entry>
  
</feed>
